[{"authors":["Eric Berberich","Pavel Emeliyanenko","Alexander Kobel","Michael Sagraloff"],"categories":null,"content":"","date":1370563200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1370563200,"objectID":"26ae54bd0bbc55cfc874b82ade2ce635","permalink":"https://workasm.github.io/publication/2013-tcs/","publishdate":"2013-06-07T00:00:00Z","relpermalink":"/publication/2013-tcs/","section":"publication","summary":"We present a certified and complete algorithm to compute arrangements of real planar algebraic curves. It computes the decomposition of the plane induced by a finite number of algebraic curves in terms of a cylindrical algebraic decomposition. From a high-level perspective, the overall method splits into two main subroutines, namely an algorithm denoted Bisolve to isolate the real solutions of a zero-dimensional bivariate system, and an algorithm denoted GeoTop to compute the topology of a single algebraic curve. Compared to existing approaches based on elimination techniques, we considerably improve the corresponding lifting steps in both subroutines. As a result, generic position of the input system is never assumed, and thus our algorithm never demands for any change of coordinates. In addition, we significantly limit the types of symbolic operations involved, that is, we only use resultant and  computations as purely symbolic operations. The latter results are achieved by combining techniques from different fields such as (modular) symbolic computation, numerical analysis and algebraic geometry. We have implemented our algorithms as prototypical contributions to the C++-project CGAL. We exploit graphics hardware to expedite the remaining symbolic computations. We have also compared our implementation with the current reference implementations, that is, LGP and Maple’s Isolate for polynomial system solving, and CGAL’s bivariate algebraic kernel for analyses and arrangement computations of algebraic curves. For various series of challenging instances, our exhaustive experiments show that the new implementations outperform the existing ones.","tags":null,"title":"Exact symbolic–numeric computation of planar algebraic curves","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1351728000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1351728000,"objectID":"23fcb30ee1945828703db67504ea3323","permalink":"https://workasm.github.io/publication/2012-phd/","publishdate":"2012-11-01T00:00:00Z","relpermalink":"/publication/2012-phd/","section":"publication","summary":"This thesis presents novel parallel algorithms to leverage the power of GPUs (Graphics Processing Units) for exact computations with polynomials having large integer coefficients. The significance of such computations, especially in real algebraic geometry, is hard to undermine. On massively-parallel architectures such as GPU, the degree of datalevel parallelism exposed by an algorithm is the main performance factor. We attain high efficiency through the use of structured matrix theory to assist the realization of relevant operations on polynomials on the graphics hardware. A detailed complexity analysis, assuming the PRAM model, also confirms that our approach achieves a substantially better parallel complexity in comparison to classical algorithms used for symbolic computations. Aside from the theoretical considerations, a large portion of this work is dedicated to the actual algorithm development and optimization techniques where we pay close attention to the specifics of the graphics hardware. As a byproduct of this work, we have developed high-throughput modular arithmetic which we expect to be useful for other GPU applications, in particular, open-key cryptography. We further discuss the algorithms for the solution of a system of polynomial equations, topology computation of algebraic curves and curve visualization which can profit to the full extent from the GPU acceleration. Extensive benchmarking on a real data demonstrates the superiority of our algorithms over several state-of-the-art approaches available to date. This thesis is written in English.","tags":null,"title":"Harnessing the power of GPUs for problems in real algebraic geometry","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1343606400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1343606400,"objectID":"89108ef49d87d50cfc7e474a2eca1f5d","permalink":"https://workasm.github.io/publication/2012-jpdc/","publishdate":"2012-07-30T00:00:00Z","relpermalink":"/publication/2012-jpdc/","section":"publication","summary":"This paper presents a complete modular approach to computing bivariate polynomial resultants on Graphics Processing Units (GPU). Given two polynomials, the algorithm first maps them to a prime field for sufficiently many primes, and then processes each modular image individually. We evaluate each polynomial at several points and compute a set of univariate resultants for each prime in parallel on the GPU. The remaining 'combine' stage of the algorithm comprising polynomial interpolation and Chinese remaindering is also executed on the graphics processor. The GPU algorithm returns coefficients of the resultant as a set of Mixed Radix (MR) digits. Finally, the large integer coefficients are recovered from the MR representation on the host machine. With the approach of displacement structure [16] and efficient modular arithmetic [8] we have been able to achieve more than 100x speed-up over a CPU-based resultant algorithm from Maple 13.","tags":null,"title":"Computing resultants on Graphics Processing Units: Towards GPU-accelerated computer algebra","type":"publication"},{"authors":["Pavel Emeliyanenko","Michael Sagraloff"],"categories":null,"content":"","date":1342915200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1342915200,"objectID":"d59417d98a3d69a0c3b2e3775ab18096","permalink":"https://workasm.github.io/publication/2012-issac/","publishdate":"2012-07-22T00:00:00Z","relpermalink":"/publication/2012-issac/","section":"publication","summary":"We study the complexity of computing the real solutions of a bivariate polynomial system using the recently presented algorithm Bisolve [2]. Bisolve is an elimination method which, in a first step, projects the solutions of a system onto the x- and y-axes and, then, selects the actual solutions from the so induced candidate set. However, unlike similar algorithms, Bisolve requires no genericity assumption on the input, and there is no need for any kind of coordinate transformation. Furthermore, extensive benchmarks as presented in [2] confirm that the algorithm is highly practical, that is, a corresponding C++ implementation in Cgal outperforms state of the art approaches by a large factor. In this paper, we focus on the theoretical complexity of Bisolve. For two polynomials f,g ∈ Z[x,y] of total degree at most n with integer coefficients bounded by 2^τ, we show that Bisolve computes isolating boxes for all real solutions of the system f = g = 0 using O(n^8 + n^7τ) bit operations, thereby improving the previous record bound for the same task by several magnitudes.","tags":null,"title":"On the complexity of solving a bivariate polynomial system","type":"publication"},{"authors":["Eric Berberich","Pavel Emeliyanenko","Alexander Kobel","Michael Sagraloff"],"categories":null,"content":"","date":1307404800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1307404800,"objectID":"1b6c9954965a50e917c7889e6cb8892b","permalink":"https://workasm.github.io/publication/2011-snc/","publishdate":"2011-06-07T00:00:00Z","relpermalink":"/publication/2011-snc/","section":"publication","summary":"We present a new certified and complete algorithm to compute arrangements of real planar algebraic curves. Our algorithm provides a geometric-topological analysis of the decomposition of the plane induced by a finite number of algebraic curves in terms of a cylindrical algebraic decomposition of the plane. Compared to previous approaches, we improve in two main aspects: Firstly, we significantly limit the types of involved exact operations, that is, our algorithms only use resultant and gcd computations as purely symbolic operations. Secondly, we introduce a new hybrid method in the lifting step of our algorithm which combines the use of a certified numerical complex root solver and information derived from the resultant computation. Additionally, we never consider any coordinate transformation and the output is also given with respect to the initial coordinate system. We implemented our algorithm as a prototypical package of the C++-library CGAL. Our implementation exploits graphics hardware to expedite the resultant and gcd computation. We also compared our implementation with the current reference implementation, that is, CGAL's curve analysis and arrangement for algebraic curves. For various series of challenging instances, our experiments show that the new implementation outperforms the existing one.","tags":null,"title":"Arrangement computation for planar algebraic curves","type":"publication"},{"authors":["Eric Berberich","Pavel Emeliyanenko","Michael Sagraloff"],"categories":null,"content":"","date":1295654400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1295654400,"objectID":"9b87ea748ab7da41c385d18aeeb03db1","permalink":"https://workasm.github.io/publication/2011-alenex/","publishdate":"2011-01-22T00:00:00Z","relpermalink":"/publication/2011-alenex/","section":"publication","summary":"We present an exact and complete algorithm to isolate the real solutions of a zero-dimensional bivariate polynomial system. The proposed algorithm constitutes an elimination method which improves upon existing approaches in a number of points. First, the amount of purely symbolic operations is significantly reduced, that is, only resultant computation and square-free factorization is still needed. Second, our algorithm neither assumes generic position of the input system nor demands for any change of the coordinate system. The latter is due to a novel inclusion predicate to certify that a certain region is isolating for a solution. Our implementation exploits graphics hardware to expedite the resultant computation. Furthermore, we integrate a number of filtering techniques to improve the overall performance. Efficiency of the proposed method is proven by a comparison of our implementation with two state-of-the-art implementations, that is, Lgp and Maple's Isolate. For a series of challenging benchmark instances, experiments show that our implementation outperforms both contestants.","tags":null,"title":"An Elimination Method for Solving Bivariate Polynomial Systems: Eliminating the Usual Drawbacks","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1279670400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1279670400,"objectID":"efde213a725b5ba182ed088e182629b8","permalink":"https://workasm.github.io/publication/2010-pasco/","publishdate":"2010-07-21T00:00:00Z","relpermalink":"/publication/2010-pasco/","section":"publication","summary":"This paper presents a complete modular approach to computing bivariate polynomial resultants on Graphics Processing Units (GPU). Given two polynomials, the algorithm first maps them to a prime field for sufficiently many primes, and then processes each modular image individually. We evaluate each polynomial at several points and compute a set of univariate resultants for each prime in parallel on the GPU. The remaining 'combine' stage of the algorithm comprising polynomial interpolation and Chinese remaindering is also executed on the graphics processor. The GPU algorithm returns coefficients of the resultant as a set of Mixed Radix (MR) digits. Finally, the large integer coefficients are recovered from the MR representation on the host machine. With the approach of displacement structure [16] and efficient modular arithmetic [8] we have been able to achieve more than 100x speed-up over a CPU-based resultant algorithm from Maple 13.","tags":null,"title":"A complete modular resultant algorithm targeted for realization on graphics hardware","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1274400000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1274400000,"objectID":"d67ae9e95b2205cfa2e227c9292cc03a","permalink":"https://workasm.github.io/publication/2010-ica3pp/","publishdate":"2010-05-21T00:00:00Z","relpermalink":"/publication/2010-ica3pp/","section":"publication","summary":"In this paper we report on the recent progress in computing bivariate polynomial resultants on Graphics Processing Units (GPU). Given two polynomials in Z[x,y], our algorithm first maps the polynomials to a prime field. Then, each modular image is processed individually. The GPU evaluates the polynomials at a number of points and computes univariate modular resultants in parallel. The remaining “combine” stage of the algorithm is executed sequentially on the host machine. Porting this stage to the graphics hardware is an object of ongoing research. Our algorithm is based on an efficient modular arithmetic from [1]. With the theory of displacement structure we have been able to parallelize the resultant algorithm up to a very fine scale suitable for realization on the GPU. Our benchmarks show a substantial speed-up over a host-based resultant algorithm [2] from CGAL (www.cgal.org).","tags":null,"title":"Modular resultant algorithm for graphics processors","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1269475200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1269475200,"objectID":"60790206aa9d86544cc7dd99f0c0fea7","permalink":"https://workasm.github.io/publication/2010-gtc/","publishdate":"2010-03-25T00:00:00Z","relpermalink":"/publication/2010-gtc/","section":"publication","summary":"We present the first implementation of a modular resultant algorithm on GPUs [4, 5]. With recent developments taking advantage of new NVidia Fermi GPU architecture and instruction set we have been able to achieve about 150x speedup over the CPU-based resultant algorithm from Maple 13.","tags":null,"title":"Accelerating symbolic computations on NVIDIA Fermi","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1259539200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1259539200,"objectID":"d8f80b41426e7f6c6731350eb12cf725","permalink":"https://workasm.github.io/publication/2009-appt/","publishdate":"2009-11-30T00:00:00Z","relpermalink":"/publication/2009-appt/","section":"publication","summary":"We present the algorithm to multiply univariate polynomials with integer coefficients efficiently using the Number Theoretic transform (NTT) on Graphics Processing Units (GPU). The same approach can be used to multiply large integers encoded as polynomials. Our algorithm exploits fused multiply-add capabilities of the graphics hardware. NTT multiplications are executed in parallel for a set of distinct primes followed by reconstruction using the Chinese Remainder theorem (CRT) on the GPU. Our benchmarking experiences show the NTT multiplication performance up to 77 GMul/s. We compared our approach with CPU-based implementations of polynomial and large integer multiplication provided by NTL and GMP libraries.","tags":null,"title":"Efficient multiplication of polynomials on graphics hardware","type":"publication"},{"authors":["Pavel Emeliyanenko","Eric Berberich","Michael Sagraloff"],"categories":null,"content":"","date":1259539200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1259539200,"objectID":"21979eccb475a58f2b69f9449022ea7a","permalink":"https://workasm.github.io/publication/2009-isvc/","publishdate":"2009-11-30T00:00:00Z","relpermalink":"/publication/2009-isvc/","section":"publication","summary":"Given a Cylindrical Algebraic Decomposition [2] of an implicitly defined algebraic curve, visualizing distinct curve arcs is not as easy as it stands because, despite the absence of singularities in the interior, the arcs can pass arbitrary close to each other. We present an algorithm to visualize distinct arcs of algebraic curves efficiently and precise (at a given resolution), irrespective of how close to each other they actually pass. Our hybrid method inherits the ideas of subdivision and curve-tracking methods. With an adaptive mixed-precision model we can render the majority of curves using machine arithmetic without sacrificing the exactness of the final result. The correctness and applicability of our algorithm is borne out by the success of our web-demo presented in [11].","tags":null,"title":"Visualizing Arcs of Implicit Algebraic Curves, Exactly and Fast","type":"publication"},{"authors":["Pavel Emeliyanenko","Michael Kerber"],"categories":null,"content":"","date":1212969600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1212969600,"objectID":"6dc5ca7ad48b9f9d5c7a80961f93d4c6","permalink":"https://workasm.github.io/publication/2008-webapp/","publishdate":"2008-06-09T00:00:00Z","relpermalink":"/publication/2008-webapp/","section":"publication","summary":"A web application is presented to compute, plot, and interactively explore planar arrangements induced by algebraic plane curves of arbitrary degree. It produces accurate curve plots and reflects the exact topology for any arrangement, including degenerated cases. Various user interface features allow the interactive exploration of the arrangement structure. This makes the tool useful for demonstrative and educational purposes, especially as it runs without initial installation process.","tags":null,"title":"Visualizing and exploring planar algebraic arrangements: a web application","type":"publication"},{"authors":["Eric Berberich","Pavel Emeliyanenko"],"categories":null,"content":"","date":1212105600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1212105600,"objectID":"b92dc73ecb660b4c732cacd6f13434f8","permalink":"https://workasm.github.io/publication/2008-cgal_ckva/","publishdate":"2008-05-30T00:00:00Z","relpermalink":"/publication/2008-cgal_ckva/","section":"publication","summary":"","tags":null,"title":"CGAL's Curved Kernel via Analysis","type":"publication"},{"authors":["Pavel Emeliyanenko","Michael Kerber"],"categories":null,"content":"","date":1209600000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1209600000,"objectID":"a791e6f80a48ad20a0b97ddfbbe00325","permalink":"https://workasm.github.io/publication/2008-cgal_akd/","publishdate":"2008-05-01T00:00:00Z","relpermalink":"/publication/2008-cgal_akd/","section":"publication","summary":"We report on a model for CGAL’s AlgebraicKernelWithAnalysis_d_2 concept which refines AlgebraicKernel_d_2. Our implementation handles bivariate polynomials in full generality, ie, with no restriction on their degree. Moreover, it allows both integers and nested square-root numbers as coefficient type. The Curve analysis and Curve pair analysis required by the concept are realized using recent work of Eigenwillig, Kerber and Wolpert (’Fast and exact geometric analysis...’, ISSAC 2007 and’Exact and efficient 2D-Arrangements...’. SODA 2008). The consequent use of certified numerical methods leads to significant speed-ups without spoiling exactness. We present benchmark results about the performance of several key methods.","tags":null,"title":"An implementation for the 2D Algebraic Kernel","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1171324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1171324800,"objectID":"1227a0d6956a0ab318798edbb785f89f","permalink":"https://workasm.github.io/publication/2007-msc/","publishdate":"2007-02-13T00:00:00Z","relpermalink":"/publication/2007-msc/","section":"publication","summary":"This thesis presents an exact and complete approach for visualization of segments and points of real plane algebraic curves given in implicit form $f(x,y) = 0$. A curve segment is a distinct curve branch consisting of regular points only. Visualization of algebraic curves having self-intersection and isolated points constitutes the main challenge. Visualization of curve segments involves even more difficulties since here we are faced with a problem of discriminating different curve branches, which can pass arbitrary close to each other. Our approach is robust and efficient (as shown by our benchmarks), it combines the advantages both of curve tracking and space subdivision methods and is able to correctly rasterize segments of arbitrary-degree algebraic curves using double, multi-precision or exact rational arithmetic.","tags":null,"title":"Visualization of Points and Segments of Real Algebraic Plane Curves","type":"publication"},{"authors":["Pavel Emeliyanenko"],"categories":null,"content":"","date":1125532800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1125532800,"objectID":"9e555f7bcf637086f9de44282af721c8","permalink":"https://workasm.github.io/publication/2005-bsc/","publishdate":"2005-09-01T00:00:00Z","relpermalink":"/publication/2005-bsc/","section":"publication","summary":"In order to the have possibility of verifying assembler programs written for the VAMP (Verified Architecture Microprocessor 1) using the abstract software machine we need to relate the VAMP formal specification with the abstract software machine specification. The software machine does not support interrupt handling and therefore programs to be executed on this machine should not produce any interrupts. In the previous work [11] the conditions for absence of interrupts were identified and their validity was proved using the PVS verification system. Besides that, a theorem was established which states that under certain conditions (including the conditions for absence of interrupts) the execution of a program on the software machine is equivalent to the execution of this program on the VAMP.","tags":null,"title":"Automatic verification of conditions for absence of interrupts","type":"publication"}]